/**
 * Returns a list of all the appointments for a particular day.
 * @param {*} state object, The state object
 * @param {*} day string, a word equal to the day of the week from "Monday" to "Friday"
 * @returns 
 */
export const getAppointmentsForDay = (state, day) => {
  const { days, appointments } = state;
  // returns list consisting of either 1 days object where name = the day parameter or an empty list
  const filteredAppts = days.filter(date => date.name === day);
  // returns an empty list if no date.name matches day or if filter fails
  if (!filteredAppts.length) {
    return [];
  }
  // retrieves state.days object from filtered array
  const appts = filteredAppts[0].appointments;
  // returns a list generated by filtering appointment property of state object.
  // Filters all appointments down to list of all (5) appointments matching day.
  return Object.values(appointments).filter((app) => appts.includes(app.id));
};
/**
 * Returns a list of interviewers for a particular day.
 * @param {*} state object, The state object
 * @param {*} day string, a word equal to the day of the week from "Monday" to "Friday"
 * @returns 
 */
export const getInterviewersForDay = (state, day) => {
  const { days, interviewers } = state;
  // returns list consisting of either 1 days object where name = the day parameter or an empty list
  const filteredInterviewers = days.filter(date => date.name === day);
  // returns an empty list if no date.name matches day or if filter fails
  if (!filteredInterviewers.length) {
    return [];
  }
  // returns list of interviewers whose ids are found in the interviewers property of the state.days property matching day
  return Object.values(interviewers).filter((app) => filteredInterviewers[0].interviewers.includes(app.id));
};
/**
 * Gets interview 
 * @param {*} state object, The state object
 * @param {*} interview null or object, interview propery of appointment in state. Object has interviewer id and student name properties. 
 * @returns 
 */
export const getInterview = (state, interview) => {
  if (!interview) {
    return null;
  }
  // returns array of one interviewer object whose id matches the id of the interview parameter
  const filterInterview = Object.values(state.interviewers).filter(interviewer => interviewer.id === interview.interviewer)
  console.log('hey', interview.student);
  // returns object with interviewer property of the filtered interviewer object and student: the student's name
  return { interviewer: filterInterview[0], student: interview.student };
}